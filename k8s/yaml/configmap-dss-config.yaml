kind: ConfigMap
apiVersion: v1
metadata:
  name: dss-config
data:
  application-dss.yml: |+

    eureka:
      client:
        serviceUrl:
          defaultZone: http://10.0.2.101:9600/eureka/
      #instance:
        #prefer-ip-address: true
        #instance-id: ${spring.cloud.client.ip-address}:${server.port}
        #metadata-map:
          #test: wedatasphere

    management:
      endpoints:
        web:
          exposure:
            include: refresh,info
    logging:
      config: classpath:log4j2.xml

    #mybatis:
    #  configuration:
    #    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

  atlas-application.properties: ''
  config.sh: >+
    ### deploy user

    deployUser=root


    ## max memory for services

    SERVER_HEAP_SIZE=512M


    ### The install home path of DSS，Must provided

    DSS_INSTALL_HOME=/root/install_shell/dss-linkis/dss


    DSS_VERSION=1.1.0


    DSS_FILE_NAME=dss-1.1.0


    ###  Linkis EUREKA  information.  # Microservices Service Registration
    Discovery Center

    EUREKA_INSTALL_IP=10.0.2.101

    EUREKA_PORT=9600

    ### If EUREKA  has safety verification, please fill in username and password

    #EUREKA_USERNAME=

    #EUREKA_PASSWORD=


    ### Linkis Gateway  information

    GATEWAY_INSTALL_IP=10.0.2.101

    GATEWAY_PORT=9001


    ################### The install Configuration of all Micro-Services
    #####################

    #

    #    NOTICE:

    #       1. If you just wanna try, the following micro-service configuration
    can be set without any settings.

    #            These services will be installed by default on this machine.

    #       2. In order to get the most complete enterprise-level features, we
    strongly recommend that you install

    #          the following microservice parameters

    #


    ### DSS_SERVER

    ### This service is used to provide dss-server capability.


    ### project-server

    DSS_FRAMEWORK_PROJECT_SERVER_INSTALL_IP=

    DSS_FRAMEWORK_PROJECT_SERVER_PORT=

    ### orchestrator-server

    DSS_FRAMEWORK_ORCHESTRATOR_SERVER_INSTALL_IP=

    DSS_FRAMEWORK_ORCHESTRATOR_SERVER_PORT=

    ### apiservice-server

    DSS_APISERVICE_SERVER_INSTALL_IP=

    DSS_APISERVICE_SERVER_PORT=

    ### dss-workflow-server

    DSS_WORKFLOW_SERVER_INSTALL_IP=

    DSS_WORKFLOW_SERVER_PORT=

    ### dss-flow-execution-server

    DSS_FLOW_EXECUTION_SERVER_INSTALL_IP=

    DSS_FLOW_EXECUTION_SERVER_PORT=

    ###dss-scriptis-server

    DSS_SCRIPTIS_SERVER_INSTALL_IP=127.0.0.1

    DSS_SCRIPTIS_SERVER_PORT=9008


    ###dss-data-api-server

    DSS_DATA_API_SERVER_INSTALL_IP=127.0.0.1

    DSS_DATA_API_SERVER_PORT=9208

    ###dss-data-governance-server

    DSS_DATA_GOVERNANCE_SERVER_INSTALL_IP=127.0.0.1

    DSS_DATA_GOVERNANCE_SERVER_PORT=9209

    ###dss-guide-server

    DSS_GUIDE_SERVER_INSTALL_IP=127.0.0.1

    DSS_GUIDE_SERVER_PORT=9210


    ############## ############## dss_appconn_instance configuration   start  
    ############## ##############

    ####eventchecker表的地址，一般就是dss数据库

    EVENTCHECKER_JDBC_URL=jdbc:mysql://127.0.0.1:3306/dss?characterEncoding=UTF-8

    EVENTCHECKER_JDBC_USERNAME=root

    EVENTCHECKER_JDBC_PASSWORD=7956214


    #### hive地址

    DATACHECKER_JOB_JDBC_URL=jdbc:mysql://:/?useUnicode=true

    DATACHECKER_JOB_JDBC_USERNAME=

    DATACHECKER_JOB_JDBC_PASSWORD=

    #### 元数据库，可配置成和DATACHECKER_JOB的一致

    DATACHECKER_BDP_JDBC_URL=jdbc:mysql://:/?useUnicode=true

    DATACHECKER_BDP_JDBC_USERNAME=

    DATACHECKER_BDP_JDBC_PASSWORD=


    EMAIL_HOST=smtp.163.com

    EMAIL_PORT=25

    EMAIL_USERNAME=xxx@163.com

    EMAIL_PASSWORD=xxxxx

    EMAIL_PROTOCOL=smtp

    ############## ############## dss_appconn_instance configuration   end  
    ############## ##############

  db.sh: |+
    ### for DSS-Server and Eventchecker APPCONN
    MYSQL_HOST=10.0.2.101
    MYSQL_PORT=3306
    MYSQL_DB=dss
    MYSQL_USER=root
    MYSQL_PASSWORD=7956214


  dss-apiservice-server.properties: >

    # Spring configurations

    spring.server.port=9206

    spring.spring.application.name=dss-apiservice-server


    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/apiservice/core/dao/mapper/*.xml

    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.apiservice.core.bo,com.webank.wedatasphere.dss.apiservice.core.vo

    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.apiservice.core.dao


    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.apiservice.core.restful


    #sit

    wds.linkis.server.version=v1

    wds.linkis.server.url=


    #test

    wds.linkis.test.mode=false

    wds.linkis.test.user=



    #dsm

    wds.linkis.server.dsm.admin.users=



    #用于执行的datasource配置

    wds.linkis.datasource.hikari.maximumPoolSize=100

    wds.linkis.datasource.hikari.minimumIdle=10
  dss-data-api-server.properties: >

    # Spring configurations

    spring.server.port=9208

    spring.spring.application.name=dss-data-api-server


    wds.linkis.log.clear=true


    wds.linkis.server.version=v1


    ##restful

    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.data.api.server.restful


    ##mybatis

    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/data/api/server/dao/impl/*.xml


    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.data.api.server.entity


    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.data.api.server.dao


    #wds.linkis.gateway.ip=127.0.0.1

    #wds.linkis.gateway.port=9001

    #wds.linkis.gateway.url=http://127.0.0.1:9001/
  dss-data-governance-server.properties: >

    # Spring configurations

    spring.server.port=9209

    spring.spring.application.name=dss-data-governance-server


    wds.linkis.log.clear=true


    wds.linkis.server.version=v1


    ##restful

    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.data.asset.restful,com.webank.wedatasphere.dss.data.classification.restful


    ##mybatis

    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/data/asset/dao/impl/*.xml

    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.data.asset.entity

    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.data.asset.dao,com.webank.wedatasphere.dss.data.warehouse.dao,com.webank.wedatasphere.dss.data.warehouse.mapper


    #wds.linkis.gateway.ip=10.0.2.101

    #wds.linkis.gateway.port=9001

    #wds.linkis.gateway.url=http://10.0.2.101:9001/



    # atlas config

    atlas.rest.address=http://xxxxxxx:21000

    atlas.username=xxxxxxxx

    atlas.password=yyyyyyyyy

    atlas.client.readTimeoutMSecs=60000

    atlas.client.connectTimeoutMSecs=60000


    atlas.cluster.name=primary


    # hive metadata config

    metastore.datasource.driver=com.mysql.jdbc.Driver

    metastore.datasource.url=jdbc:mysql://xxxxxx:yyyy/metastore?characterEncoding=UTF-8

    metastore.datasource.username=xxxxxx

    metastore.datasource.password=yyyyyy
  dss-flow-execution-server.properties: >
 
    # Spring configurations

    spring.server.port=9006


    spring.spring.application.name=dss-flow-entrance


    ##mybatis

    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/flow/execution/entrance/dao/impl/*.xml,classpath*:org/apache/linkis/jobhistory/dao/impl/*.xml


    wds.linkis.server.mybatis.typeAliasesPackage=


    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.flow.execution.entrance.dao,org.apache.linkis.jobhistory.dao



    wds.linkis.server.restful.scan.packages=org.apache.linkis.entrance.restful,com.webank.wedatasphere.dss.flow.execution.entrance.restful


    #wds.linkis.server.component.exclude.classes=org.apache.linkis.DataWorkCloudApplication


    wds.linkis.engine.application.name=flowExecutionEngine

    wds.linkis.enginemanager.application.name=flowExecution


    wds.linkis.query.application.name=linkis-ps-publicservice


    wds.linkis.console.config.application.name=linkis-ps-publicservice

    wds.linkis.engine.creation.wait.time.max=20m

    wds.linkis.server.version=v1


    wds.linkis.server.socket.mode=true


    wds.linkis.client.flow.adminuser=ws

    wds.linkis.client.flow.author.user.token=WS-AUTH


    wds.linkis.server.component.exclude.classes=org.apache.linkis.entranceclient.conf.ClientForEntranceSpringConfiguration,org.apache.linkis.entranceclient.conf.ClientSpringConfiguration


    wds.linkis.server.component.exclude.packages=org.apache.linkis.entrance.restful.

    spring.spring.main.allow-bean-definition-overriding=true


    wds.linkis.entrance.config.log.path=file:///appcom/tmp/dss

    wds.linkis.spark.engine.version=2.4.3

    wds.linkis.hive.engine.version=2.3.3
  dss-framework-orchestrator-server.properties: >


    # Spring configurations

    spring.server.port=9003

    spring.spring.application.name=dss-framework-orchestrator-server-dev


    wds.linkis.test.mode=false


    wds.linkis.test.user=hadoop


    wds.linkis.log.clear=true


    wds.linkis.server.version=v1


    ##restful

    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.orchestrator.server.restful


    ##mybatis

    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/framework/appconn/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/orchestrator/core/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/server/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/application/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/workspace/mapper/impl/*.xml,classpath*:com/webank/wedatasphere/dss/workspace/common/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/orchestrator/db/dao/impl/*.xml


    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.server.entity,com.webank.wedatasphere.dss.application.entity,com.webank.wedatasphere.dss.framework.appconn.entity


    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.framework.appconn.dao,com.webank.wedatasphere.dss.orchestrator.core.dao,com.webank.wedatasphere.dss.server.dao,com.webank.wedatasphere.dss.application.dao,com.webank.wedatasphere.dss.workspace.mapper,com.webank.wedatasphere.dss.workspace.common.dao,com.webank.wedatasphere.dss.workspace.common.dao,com.webank.wedatasphere.dss.orchestrator.db.dao



    ##export file dir

    wds.dss.server.export.url=/appcom/tmp/dss
  dss-framework-project-server.properties: >+

    # Spring configurations

    spring.server.port=9202

    spring.spring.application.name=dss-framework-project-server


    wds.linkis.log.clear=true


    wds.linkis.server.version=v1


    ##restful

    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.framework.workspace.restful,com.webank.wedatasphere.dss.framework.project.restful,com.webank.wedatasphere.dss.framework.release.restful,com.webank.wedatasphere.dss.framework.appconn.restful,com.webank.wedatasphere.dss.framework.admin.restful


    ##mybatis

    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/framework/workspace/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/application/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/framework/project/dao/impl/*Mapper.xml,classpath*:com/webank/wedatasphere/dss/framework/appconn/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/framework/release/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/framework/admin/xml/impl/*.xml


    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.application.entity,com.webank.wedatasphere.dss.common.entity,com.webank.wedatasphere.dss.framework.workspace.bean,com.webank.wedatasphere.dss.framework.project.entity,com.webank.wedatasphere.dss.framework.appconn.entity,com.webank.wedatasphere.dss.framework.release.entity,com.webank.wedatasphere.dss.framework.admin.pojo.entity


    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.framework.workspace.dao,com.webank.wedatasphere.dss.application.dao,com.webank.wedatasphere.dss.framework.project.dao,com.webank.wedatasphere.dss.framework.appconn.dao,com.webank.wedatasphere.dss.framework.release.dao,com.webank.wedatasphere.dss.framework.admin.xml


    wds.dss.appconn.checker.development.ignore.list=workflow,sendemail

    wds.dss.appconn.checker.project.ignore.list=visualis
  dss-guide-server.properties: >


    # Spring configurations

    spring.server.port=9210

    spring.spring.application.name=dss-guide-server


    spring.jackson.date-format=yyyy-MM-dd HH:mm:ss

    spring.jackson.time-zone=GMT+8


    wds.linkis.server.version=v1


    wds.linkis.log.clear=true




    ##restful

    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.guide.server.restful


    ##mybatis

    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/guide/server/dao/impl/*.xml

    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.guide.server.entity

    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.guide.server.dao



    ## guide_images_path

    guide.content.images.path=/opt/dss/dss-guide-server/guide_images/

    guide.chapter.images.path=/opt/dss/dss-guide-server/guide_images/


    #gitbook

    #The machine where the file exists

    target.ip.address=127.0.0.1

    #The file path of the machine where the file is stored

    host.gitbook.path=/appcom/Install/ApacheInstall/gitbook_books

    #The path to copy the file to the current machine

    target.gitbook.path=/appcom/Install/ApacheInstall

    #SUMMARY.md ignore absolve

    summary.ignore.model=km

    #sync model include: gitbook or database

    guide.sync.model=gitbook
  dss-scriptis-server.properties: >

    # Spring configurations

    spring.server.port=9008

    spring.spring.application.name=dss-scriptis-server


    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/scriptis/dao/mapper/*.xml

    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.scriptis.vo

    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.scriptis.dao


    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.scriptis.restful


    #sit

    wds.linkis.server.version=v1

    wds.linkis.server.url=


    #test

    wds.linkis.test.mode=false

    wds.linkis.test.user=


    wds.dss.scriptis.global.limits.exportResEnable=false

    wds.dss.scriptis.global.limits.exportTableEnable=false
  dss-workflow-server.properties: >+
    # Spring configurations

    spring.server.port=9005

    spring.spring.application.name=dss-workflow-server-dev


    wds.linkis.test.mode=false


    wds.linkis.test.user=


    wds.linkis.log.clear=true


    wds.linkis.server.version=v1


    ##restful

    wds.linkis.server.restful.scan.packages=com.webank.wedatasphere.dss.workflow.restful


    ##mybatis

    wds.linkis.server.mybatis.mapperLocations=classpath*:com/webank/wedatasphere/dss/workflow/dao/impl/*.xml,classpath*:com/webank/wedatasphere/dss/framework/appconn/dao/impl/*.xml


    wds.linkis.server.mybatis.typeAliasesPackage=com.webank.wedatasphere.dss.workflow.entity,com.webank.wedatasphere.dss.framework.appconn.entity


    wds.linkis.server.mybatis.BasePackage=com.webank.wedatasphere.dss.workflow.dao,com.webank.wedatasphere.dss.framework.appconn.dao


    ##import file dir

    wds.dss.file.upload.dir=/appcom/tmp/uploads


    wds.dss.server.export.env=DEV

    wds.dss.server.import.env=DEV
  dss.properties: >

    wds.linkis.gateway.ip=10.0.2.101

    wds.linkis.gateway.port=9001

    wds.linkis.gateway.url=http://10.0.2.101:9001/

    wds.linkis.gateway.wtss.url=http://10.0.2.101:9001/


    wds.linkis.mysql.is.encrypt=false

    wds.linkis.server.mybatis.datasource.url=jdbc:mysql://10.0.2.101:3306/dss?characterEncoding=UTF-8

    wds.linkis.server.mybatis.datasource.username=root

    wds.linkis.server.mybatis.datasource.password=7956214


    wds.dss.esb.appid=

    wds.dss.esb.token=


    wds.dss.appconn.scheduler.job.label=dev



    wds.linkis.reflect.scan.package=org.apache.linkis,com.webank.wedatasphere.dss

    spring.spring.mvc.servlet.path=/api/rest_j/v1

    spring.spring.servlet.multipart.max-file-size=200MB

    spring.spring.servlet.multipart.max-request-size=200MB

    wds.dss.project.strict.mode=true
  log4j.properties: >

    ### set log levels ###


    log4j.rootCategory=INFO,console


    log4j.appender.console=org.apache.log4j.ConsoleAppender

    log4j.appender.console.Threshold=INFO

    log4j.appender.console.layout=org.apache.log4j.PatternLayout

    #log4j.appender.console.layout.ConversionPattern= %d{ISO8601} %-5p (%t)
    [%F:%M(%L)] - %m%n

    log4j.appender.console.layout.ConversionPattern= %d{ISO8601} %-5p (%t) %p
    %c{1} - %m%n



    log4j.appender.com.webank.bdp.ide.core=org.apache.log4j.DailyRollingFileAppender

    log4j.appender.com.webank.bdp.ide.core.Threshold=INFO

    log4j.additivity.com.webank.bdp.ide.core=false

    log4j.appender.com.webank.bdp.ide.core.layout=org.apache.log4j.PatternLayout

    log4j.appender.com.webank.bdp.ide.core.Append=true

    log4j.appender.com.webank.bdp.ide.core.File=logs/dss-apiservice-server.log

    log4j.appender.com.webank.bdp.ide.core.layout.ConversionPattern= %d{ISO8601}
    %-5p (%t) [%F:%M(%L)] - %m%n


    log4j.logger.org.springframework=INFO
  log4j2.xml: |+
    <?xml version="1.0" encoding="UTF-8"?>

    <configuration status="error" monitorInterval="30">
        <appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <ThresholdFilter level="INFO" onMatch="ACCEPT" onMismatch="DENY"/>
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%t] %logger{36} %L %M - %msg%xEx%n"/>
            </Console>
            <RollingFile name="RollingFile" fileName="logs/dss-server.log"
                         filePattern="logs/$${date:yyyy-MM}/${serviceName}-log-%d{yyyy-MM-dd}-%i.log">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] [%-40t] %c{1.} (%L) [%M] - %msg%xEx%n"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
                <DefaultRolloverStrategy max="20"/>
            </RollingFile>
        </appenders>
        <loggers>
            <root level="INFO">
                <appender-ref ref="RollingFile"/>
                <appender-ref ref="Console"/>
            </root>
        </loggers>
    </configuration>
  token.properties: |
    ${userName}=${password}
